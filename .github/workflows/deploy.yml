name: "Terraform"

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      action:
        required: true
        type: choice
        description: Terraform Action
        options:
          - apply
          - destroy

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:
  terraform_apply:
    name: "Deploy Cluster"
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event.inputs.action == 'apply'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.10.2

      - name: Terraform Init
        run: terraform init

      - name: Terraform Apply
        run: terraform apply -auto-approve

  deploy_customers:
    name: "Deploy Customers"
    runs-on: ubuntu-latest
    needs: terraform_apply
    if: github.event_name == 'push' || github.event.inputs.action == 'apply'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.10.2

      - name: Deploy Customers
        run: |
          cd app/customers
          terraform init && terraform apply -auto-approve

  deploy_payments:
    name: "Deploy Payments"
    runs-on: ubuntu-latest
    needs: terraform_apply
    if: github.event_name == 'push' || github.event.inputs.action == 'apply'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.10.2

      - name: Deploy Payments
        run: |
          cd app/payments
          terraform init && terraform apply -var "database_password=${{ secrets.DATABASE_PASSWORD }}" -auto-approve
        env:
          DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}

  deploy_orders:
    name: "Deploy Orders"
    runs-on: ubuntu-latest
    needs: terraform_apply
    if: github.event_name == 'push' || github.event.inputs.action == 'apply'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.10.2

      - name: Deploy Orders
        run: |
          cd app/orders
          terraform init && terraform apply -var "database_password=${{ secrets.DATABASE_PASSWORD }}" -var "commit_hash=${{ github.sha }}" -auto-approve
        env:
          DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}

  terraform_destroy_microservices:
    name: "Destroy Microservices"
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.10.2

      - name: Destroy Orders
        run: |
          cd app/orders
          terraform init && terraform destroy -auto-approve

      - name: Destroy Payments
        run: |
          cd app/payments
          terraform init && terraform destroy -auto-approve

      - name: Destroy Customers
        run: |
          cd app/customers
          terraform init && terraform destroy -auto-approve

  terraform_destroy:
    name: "Terraform Destroy"
    runs-on: ubuntu-latest
    needs: terraform_destroy_microservices
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.10.2

      - name: Terraform Init
        run: terraform init

      - name: Terraform Destroy
        run: terraform destroy -auto-approve
